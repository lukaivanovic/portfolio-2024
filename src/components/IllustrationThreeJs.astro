---
// Remove the import from here
---

<div id="solar-system-container"></div>

<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";

  // Get the container element
  const container = document.getElementById("solar-system-container");

  // Set up the scene, camera, and renderer
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({ antialias: true });

  // Set renderer size to match container
  function updateRendererSize() {
    const width = container.clientWidth;
    const height = container.clientHeight;
    renderer.setSize(width, height);
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
  }

  updateRendererSize();

  // Set the background color to white
  renderer.setClearColor(0xffffff, 1);
  container.appendChild(renderer.domElement);

  // Add a point light to the camera
  const cameraLight = new THREE.PointLight(0xffffff, 1, 0);
  camera.add(cameraLight);
  scene.add(camera);

  // Create the sun
  const sunGeometry = new THREE.SphereGeometry(5, 64, 64);
  const sunMaterial = new THREE.MeshPhongMaterial({
    color: 0xffff00,
    emissive: 0xffff00,
    emissiveIntensity: 0.3,
  });
  const sun = new THREE.Mesh(sunGeometry, sunMaterial);
  scene.add(sun);

  // Create planets
  const planetData = [
    {
      name: "Mercury",
      radius: 0.3,
      distance: 15,
      color: 0x8a8a8a,
      tiltX: 0.034,
      tiltY: 0.05,
    },
    {
      name: "Venus",
      radius: 0.5,
      distance: 25,
      color: 0xe39e1c,
      tiltX: 0.15,
      tiltY: 0.08,
    },
    {
      name: "Earth",
      radius: 0.6,
      distance: 35,
      color: 0x6b93d6,
      tiltX: 0.041,
      tiltY: 0.02,
    },
    {
      name: "Mars",
      radius: 0.4,
      distance: 45,
      color: 0xc1440e,
      tiltX: 0.09,
      tiltY: 0.12,
    },
    {
      name: "Jupiter",
      radius: 1.2,
      distance: 60,
      color: 0xd8ca9d,
      tiltX: 0.05,
      tiltY: 0.18,
    },
  ];

  const planets = planetData.map((planet) => {
    const geometry = new THREE.SphereGeometry(planet.radius, 32, 32);
    const material = new THREE.MeshStandardMaterial({
      color: planet.color,
      roughness: 0.7,
      metalness: 0.2,
    });
    const mesh = new THREE.Mesh(geometry, material);

    // Create a pivot for the planet
    const pivot = new THREE.Object3D();
    pivot.add(mesh);
    scene.add(pivot);

    // Position the planet
    mesh.position.x = planet.distance;

    // Create a 3D tube for the orbit
    const orbitGeometry = new THREE.TorusGeometry(
      planet.distance,
      0.05,
      32,
      200
    );

    // Use MeshLambertMaterial for orbits to react to light
    const orbitMaterial = new THREE.MeshLambertMaterial({
      color: 0x808080,
      transparent: true,
      opacity: 0.5,
      emissive: 0x222222,
      emissiveIntensity: 0.2,
    });

    const orbitMesh = new THREE.Mesh(orbitGeometry, orbitMaterial);
    orbitMesh.rotation.x = Math.PI / 2; // Rotate the orbit to be horizontal

    // Make orbit meshes receive shadows
    orbitMesh.receiveShadow = true;

    // Apply tilts to the pivot
    pivot.rotation.x = planet.tiltX * Math.PI;
    pivot.rotation.y = planet.tiltY * Math.PI;

    pivot.add(orbitMesh);

    return { mesh, pivot, orbitMesh };
  });

  // Add OrbitControls
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true; // Add smooth damping effect
  controls.dampingFactor = 0.05;
  controls.screenSpacePanning = false;
  controls.minDistance = 10;
  controls.maxDistance = 200;
  controls.maxPolarAngle = Math.PI / 2;

  // Update camera position
  camera.position.set(50, 25, 50);
  camera.lookAt(scene.position);

  // Animation loop
  function animate() {
    requestAnimationFrame(animate);

    // Rotate planets around the sun
    planets.forEach((planet, index) => {
      const angle = Date.now() * 0.001 * (1 / (index + 1));
      planet.pivot.rotation.y = angle;
    });

    // Update controls
    controls.update();

    // Update camera light position
    cameraLight.position.copy(camera.position);

    renderer.render(scene, camera);
  }

  animate();

  // Handle container resize
  const resizeObserver = new ResizeObserver(updateRendererSize);
  resizeObserver.observe(container);
</script>

<style>
  #solar-system-container {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
</style>
